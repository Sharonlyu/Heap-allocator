/* File: explicit.c
 * ----------------
 * An explicit allocator that allocates memory by searching the heap for free blocks via
 * an explicit list. The explicit list is a doubly-linked list, which uses the first
 * 16 bytes of each free payload for prev/next pointers.  Every block has a header that
 * stores the information(size, status in-use or free). The header is 8-byte-long and the
 * last bit is used to store the status in-use or free. Free block are recycled and reused
 * for subsequent malloc request. A freed block should be coalesced with its neighbor block
 * to the right if it is also free. In realloc, the block is resized in-place whenever possible.
 */


#include "allocator.h"
#include "debug_break.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

//struct for the prev/next pointers
typedef struct node{
    void *prev;
    void *next;
}node;

static void *segment_start;
static void *segment_end;
static void *free_list;//pointer to the first node

#define HEADER_SZ 8
#define NODE_SZ 16



/* Function: roundup
 * -----------------
 * This function rounds up the given numnber to the given multiple, which must be a power of 2,
 * and returns the result.
 * This function is borrowed from bump.c.
 */
size_t roundup(size_t sz, size_t mult){
    return (sz + mult - 1) & ~(mult - 1);
}

/* Function: myinit
 * ----------------
 * This function initializes global variables based on specified segment boundary parameters
 */
bool myinit(void *heap_start, size_t heap_size) {
    //assume the starting addresss is non-null aligned to ALIGNMENT, and heap size is multiple of ALIGNMENT
    if (heap_size <= 0){
        return false;
    }

    segment_start = heap_start;
    segment_end = (char*)segment_start + heap_size;

    if (segment_end == NULL){
        return false;
    }

    void *first_header = heap_start;
    *(size_t*)first_header = heap_size - HEADER_SZ;
    free_list = (char*)segment_start + HEADER_SZ;//points to the first payload
    ((node*)free_list)->prev = NULL;//meaning there's no prev/next free block currently
    ((node*)free_list)->next = NULL;
    return true;
}

/* Function: get_payload_size
 * -----------------
 * This function returns the size of the payload, given the header pointer
 */
size_t get_payload_size(void *header){
    return *(size_t*)header & (~0x1);
}

/* Function: is_alloc
 * -----------------
 * This function returns the free status of the payload, given the header pointer
 * 1 is for in-ise,0 is for free
 */
size_t is_alloc(void *header){
    return *(size_t*)header & 0x1;
}

/* Function: get_header_ptr
 * -----------------
 * This function returns the pointer to the header, given the payload pointer
 */
void *get_header_ptr(void *payload){
    return (char*)payload - HEADER_SZ;
}

/* Function: add_free_node
 * -----------------
 * This function adds a free block with the input address to the free list
 * The free list is LIFO, so the new_node is added in the front.
 */
void add_free_node(void *payload){
    node *new_node = (node *)payload;
    if (free_list == NULL){//if free_list is empty
        new_node->next = NULL;
        new_node->prev = NULL;

    }else{
        new_node->prev = NULL;
        new_node->next = free_list;
        ((node*)free_list)->prev = new_node;
    }
    free_list = (void*)new_node;//mark new_node as the new start of the free list
}

/* Function: remove_free_node
 * -----------------
 * This function removes a free block with the input address from the free list
 */
void remove_free_node(void *payload){
    if (free_list == NULL) {//if no node in the free list
        return;
    }
    node *old_node = (node *)payload;
    //find prev and next free nodes
    node *prev_node = old_node->prev;
    node *next_node = old_node->next;

    if (prev_node == NULL && next_node == NULL){//old_node is the only node in free_list
        free_list = NULL;
    }else if (prev_node == NULL){//it's the first node
        free_list = (void*)next_node;
        next_node->prev = NULL;
    }else if (next_node == NULL){//it's the last node
        prev_node->next = NULL;
    }else{//it's in the middle of the list
        prev_node->next = next_node;
        next_node->prev = prev_node;
    }
}



/* Function: split_block
 * -----------------
 * This function splits a chunk block into a used one with requested size
 * and a free one with the rest of the size excluding the header size.
 * diff is the rest of the size, which is greater than 24 bytes, because a
 * new block should have enough space for a header and prev/mext pointers.
 * The newly splitted block is added to the free list.
 */
void split_block(void *old_header, node *old_node, size_t diff, size_t needed){

    *(size_t*) old_header = needed;
    *(size_t*) old_header |= 0x1;
    void *next_header = (char*)old_node + needed;//create new header
    *(size_t*)next_header = diff - HEADER_SZ;//set the new payload
    void *new_payload = (char*)next_header + HEADER_SZ;
    add_free_node(new_payload);
}

/* Function: mymalloc
 * -----------------
 * This function satisfies an allocation request by searching the heap for free blocks via
 * the explicit list and allocate the first-fit free block
 */
void *mymalloc(size_t requested_size) {
    if (requested_size <= 0 || requested_size > MAX_REQUEST_SIZE || free_list == NULL){
        return NULL;
    }
    size_t roundup_sz = roundup(requested_size, ALIGNMENT);
    //need at least 16 bytes for prev/next pointers
    size_t needed = (roundup_sz <= NODE_SZ)? NODE_SZ : roundup_sz;

    void *cur = free_list;//pointer to the current node (address of the first byte in payload)
    while (cur != NULL){
        void *header = get_header_ptr(cur);
        size_t payload_size = get_payload_size(header);

        if (!is_alloc(header) && payload_size >= needed){
            size_t diff = payload_size - needed;

            if (diff >= (NODE_SZ + HEADER_SZ)){//at least 24 bytes
                split_block(header, (node*)cur, diff, needed);
            }
            *(size_t*)header |= 0x1;
            remove_free_node(cur);
            return cur;
        }
        cur = ((node*)cur)->next;//move to next free block
    }
    return NULL;
}

/* Function: coalesce
 * -----------------
 * This function firstly check if the right block of the current block is free.
 * If the right block is free, then it will coalesce the current block with the
 * right free block. The right neighbor is also removed from the free list. This
 * process will be repeated until the requirement doesn't meet.
 */
void coalesce(void *payload){
    void *header = get_header_ptr(payload);
    size_t payload_size = get_payload_size(header);
    void *neighbor_header = (char *)payload + payload_size;

    while (neighbor_header != NULL && neighbor_header < segment_end && !is_alloc(neighbor_header)){//keep coalescing
        size_t neighbor_payload = get_payload_size(neighbor_header);
        void *neighbor_node_ptr = (char *)neighbor_header + HEADER_SZ;
        remove_free_node(neighbor_node_ptr);//remove free neighbor node
        payload_size += neighbor_payload + HEADER_SZ;
        *(size_t*)header = payload_size;//update the header every time
        neighbor_header = (char *)payload + payload_size;
    }
}

/* Function: myfree
 * -----------------
 * This function satisfies a free request by turning off the last bit of the header
 * and add the free block to the free list
 */
void myfree(void *ptr) {
    if (ptr == NULL || ptr < segment_start || ptr > segment_end){
        return;
    }else{
        coalesce(ptr);
        void *header = get_header_ptr(ptr);
        *(size_t*)header &= (~0x1);//turn off the last bit
        add_free_node(ptr);
    }
}

/* Function: myrealloc
 * -----------------
 * This function satisfies an request for resizing previously-allocated blocks
 * by allocating a new block of the requested size and moving the existing contents
 * to that region. If the previously-allocated block is large enough, then the contents
 * will not be moved.
 */
void *myrealloc(void *old_ptr, size_t new_size) {

    if (old_ptr != NULL && (old_ptr < segment_start || old_ptr >segment_end)){//invalid pointer
        return NULL;
    }
    if (old_ptr == NULL && new_size != 0){
        return mymalloc(new_size);
    }
    if (old_ptr != NULL && new_size == 0){
        myfree(old_ptr);
        return NULL;
    }
    if (new_size > MAX_REQUEST_SIZE || new_size == 0 || old_ptr == NULL){
        return NULL;
    }

    void *old_header = get_header_ptr(old_ptr);
    size_t old_payload = get_payload_size(old_header);
    size_t roundup_sz = roundup(new_size, ALIGNMENT);
    size_t needed = (roundup_sz <= NODE_SZ)? NODE_SZ : roundup_sz;

    coalesce(old_ptr);
    size_t updated_payload = get_payload_size(old_header);//the payload after coalescing
    if (updated_payload >= needed){
        size_t diff = updated_payload - needed;
        if (diff >= (HEADER_SZ + NODE_SZ)){
            split_block((char*)old_ptr - HEADER_SZ, (node*)old_ptr, diff, needed);
        }else{
            *(size_t*) old_header |= 0x1;
        }
        return old_ptr;
     }else{
        void *new_ptr = mymalloc(needed);
        memcpy(new_ptr, old_ptr, old_payload);
        *(size_t*)old_header &= (~0x1); //free the old block
        add_free_node(old_ptr);
        return new_ptr;
    }
}

/* Function: validate_heap
 * -----------------
 * This function checks for potential errors/inconsistencies in the heap data sturcture
 * and returns false if there were issues, or true otherwise. The implementation checks
 * if the free status of the free block is valid and if the the number of changed bytes
 * is the sum of free and used bytes.
 */
bool validate_heap() {
    void *cur = (char*) segment_start + HEADER_SZ;
    void *cur_free = free_list;
    size_t free = 0;
    size_t used = 0;
    size_t changed = 0;
    while (cur_free != NULL){
        void *header = get_header_ptr(cur_free);
        size_t is_alloc_int = is_alloc(header);
        size_t payload_size = get_payload_size(header);
        free += payload_size + HEADER_SZ;

        if (is_alloc_int != 0){
            printf("Wrong free status\n");
            breakpoint();
            return false;
        }
        cur_free = ((node*)cur_free)->next;//move to next free block
    }

    while (cur < segment_end){
        void *header = get_header_ptr(cur);
        size_t payload_size = get_payload_size(header);
        size_t is_alloc_int = is_alloc(header);
        changed += payload_size + HEADER_SZ;
        if(is_alloc_int){
            used += payload_size + HEADER_SZ;
        }
        cur = (char*)cur + payload_size + HEADER_SZ;
    }
    size_t calculate_changed = free + used;

    if(calculate_changed != changed){
        printf("The number of changed block is not valid\n");
        printf("Actual changed: %zu, free: %zu, used: %zu", calculate_changed, free, used);
        return false;
    }

    return true;
}

/* Function: dump_heap
 * -----------------
 * This function is used for gdb debugging. It's used to print out the segment start, segment end.
 * Payload_ptr, prev_ptr, next_ptr, payload size, free status for the free blocks are printed out
 * first. Then, header information of the allocated blocks are printed out.
 */
void dump_heap(){
    printf("HEAP segment starts at address %p, ends at %p\n", segment_start, segment_end);
    void *curr = (char*) segment_start + HEADER_SZ;
    printf("Free blocks: \n");
    void *curr_free = free_list;
    while (curr_free != NULL){
        void *header = get_header_ptr(curr_free);
        size_t payload_size = get_payload_size(header);
        size_t is_alloc_int = is_alloc(header);
        void* next_node_ptr = ((node *)curr_free)->next;
        void* prev_node_ptr = ((node *)curr_free)->prev;
        printf("Cur: %p, prev: %p, next: %p, payload: %zu, alloc_status: %zu\n", curr_free, prev_node_ptr, next_node_ptr, payload_size, is_alloc_int);
        curr_free = ((node*)curr_free)->next;//move to next free block
    }

    printf("Allocated blocks: \n");
    while (curr < segment_end){
        void *header = get_header_ptr(curr);
        size_t is_alloc_int = is_alloc(header);
        size_t payload_size = get_payload_size(header);
        if(is_alloc_int){
            void* next_node_ptr = ((node *)curr)->next;
            void* prev_node_ptr = ((node *)curr)->prev;
            printf("Cur: %p, prev: %p, next: %p, payload: %zu, alloc_status: %zu\n", curr, prev_node_ptr, next_node_ptr, payload_size, is_alloc_int);

        }
        curr = (char*)curr + payload_size + HEADER_SZ;
    }
}
