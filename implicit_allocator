/** File: implicit.c
 * -----------------
 * An implicit allocator that allocates memory by searching the heap for free blocks via an implicit list.
 * Every block has a header that stores the block information (size, status in-use or free).
 * The header is 8-byte-long and the last bit is used to store the status in-use or free.
 * Free blocks are recylcled and reused for subsequent malloc requests.
 *
 */

#include "allocator.h"
#include "debug_break.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

static void *segment_start;
static void *segment_end;

#define HEADER_SZ 8

/* Function: roundup
 * -----------------
 * This function rounds up the given number to the given multiple, which must be a power of 2, and returns
 * the result.
 * This function is borrowed from bump.c.
 */
size_t roundup(size_t sz, size_t mult){
    return (sz + mult - 1) & ~(mult - 1);
}


/* Function: myinit
 * -----------------
 * This function initializes global variables based on specified segment boundary parameters
 */
bool myinit(void *heap_start, size_t heap_size) {
    //assume the starting address is non-NULL aligned to ALIGNMENT, and headp size is a multiple of ALIGNMENT
    if (heap_size == 0){
        return false;
    }

    segment_start = heap_start;
    segment_end = (char*)segment_start + heap_size;

    if (segment_end == NULL) {
        return false;
    }

    void *first_header = heap_start;
    *(size_t*)first_header = heap_size - HEADER_SZ;
    return true;
}
/* Function: get_payload_size
 * --------------------------
 * This function returns the size of the payload, given the header pointer
 */
size_t get_payload_size(void *header){
    return *(size_t*)header & (~0x1);
}

/* Function: is_alloc
 * --------------------------
 * This function returns the free status of the payload, given the header poiner
 * 1 is for in-use, 0 is for free
 */
size_t is_alloc(void *header){
    return *(size_t*)header & 0x1;;
}

/* Function: get_header_ptr
 * --------------------------
 * This function returns the pointer to the header, given the payload pointer
 */
void *get_header_ptr(void *payload){
    return (char*)payload - HEADER_SZ;
}


/* Function: split_block
 * --------------------------
 * This function split a chunk block into a used one with requested size
 * and a free one with the rest of the size excluding the header size.
 * diff is the rest of the size, which is greater than the HEADER_SZ, to
 * avoid a block with 0 payload.
 */
void split_block(void *old_header, void *old_ptr, size_t diff, size_t needed){
    //mark old_header as allocated with correct size
    *(size_t*)old_header = needed;
    *(size_t*)old_header |= 0x1;
    //mark new_header with correct size
    void *next_header = (char*)old_ptr + needed;
    *(size_t*)next_header = diff - HEADER_SZ;
}


/* Function: mymalloc
 * --------------------------
 * This function satisfies an allocation request by searching the heap for free blocks via an implicit list,
 * and allocate the first-fit free block
 */
void *mymalloc(size_t requested_size) {
    if (requested_size <= 0 || requested_size > MAX_REQUEST_SIZE){
        return NULL;
    }

    size_t needed = roundup(requested_size, ALIGNMENT);
    void *cur = (char*)segment_start + HEADER_SZ;//payload_ptr

    while(cur < segment_end){
        void *header = get_header_ptr(cur);
        size_t payload_size = get_payload_size(header);
        if (!is_alloc(header) &&  payload_size >= needed){//if the block is free and has enough space
            size_t diff = payload_size - needed;
            if (diff <= HEADER_SZ){//has space but not enough to split
                *(size_t*)header |= 0x1;//turn on last bit, meaning "allocated"
            } else {
                split_block(header, cur, diff, needed);//split the large free block
            }
            return cur;
        }
        cur = (char*)cur + payload_size + HEADER_SZ;//jump to next payload_ptr
    }
    return NULL;
}



/* Function: myfree
 * --------------------------
 * This function satisfies a free request by turning off the last bit of the header
 */
void myfree(void *ptr) {
    if (ptr == NULL || ptr < segment_start || ptr > segment_end){
        return;
    }else{
        void *header = get_header_ptr(ptr);
        *(size_t*)header &= (~0x1);//turn off the last bit
    }

}

/* Function: myrealloc
 * --------------------------
 * This function satisfies an request for resizing previously-allocated blocks
 * by allocating a new block of the requested size and moving the existing contents
 * to that region. If the previous-allocated block is large enoough, then the contents
 * will not be moved.
 */
void *myrealloc(void *old_ptr, size_t new_size) {

    if (old_ptr != NULL && (old_ptr < segment_start || old_ptr > segment_end)){
        return NULL;
    }

    if (old_ptr == NULL && new_size != 0){
        return mymalloc(new_size);
    }

    if (old_ptr != NULL && new_size == 0){
        myfree(old_ptr);
        return NULL;
    }

    if (new_size == 0 || new_size > MAX_REQUEST_SIZE || old_ptr == NULL){// if the requested size is invalid
        return NULL;
    }

    void *old_header = get_header_ptr(old_ptr);
    size_t old_payload = get_payload_size(old_header);
    size_t needed = roundup(new_size, ALIGNMENT);

    if (old_payload < needed){//not enough space
        void *new_ptr = mymalloc(needed);
        memcpy(new_ptr, old_ptr, old_payload);
        myfree(old_ptr);
        return new_ptr;
    }else{
        size_t diff = old_payload - needed;
        if (diff > HEADER_SZ){
            split_block((char*)old_ptr - HEADER_SZ, old_ptr, diff, needed);//split the large free block
        }
        return old_ptr;
    }

}



/* Function: validate_heap
 * --------------------------
 * This function checks for potential errors/inconsistencies in the heap data structures and returns
 * false if there were issues, or true otherwise. This implementation checks if the free status of each
 * block is valid.
 */
bool validate_heap() {
    void *cur = (char*)segment_start + HEADER_SZ;
    size_t used = 0;
    size_t free = 0;
    size_t changed = 0;
    while(cur < segment_end){
        void *header = get_header_ptr(cur);
        size_t payload_size = get_payload_size(header);
        size_t is_alloc_int = is_alloc(header);
        changed += payload_size + HEADER_SZ;

        if (is_alloc_int == 0){
            free += payload_size + HEADER_SZ;
        }
        if (is_alloc_int == 1 ){
            used += payload_size + HEADER_SZ;
        }
        if (is_alloc_int !=0 && is_alloc_int !=1 ){//if invalid free status
            printf("Wrong free status\n");
            breakpoint();
            return false;
        }
        cur = (char*)cur + payload_size + HEADER_SZ;//jump to next payload_ptr
    }
    //size_t calculate_changed = used + freed;
    if(changed != (used + free)){
        printf("The number of changed block bytes is invalid\n");
    }
    return true;
}

/* Function: dump_heap
 * --------------------------
 * This function is used for gdb debugging. It is used to print out the segment start, segment end,
 * header information(payload size, free status, header pointer address).
 */
void dump_heap(){
    printf("Heap segment starts at address %p, ends at %p.\n",segment_start,segment_end);
    void *curr = (char*)segment_start + HEADER_SZ;
    while(curr < segment_end){
        void *header = get_header_ptr(curr);
        size_t payload_size = get_payload_size(header);
        size_t is_alloc_int = is_alloc(header);
        printf("Header: %p, payload: %zu, alloc_status: %zu\n", header, payload_size, is_alloc_int);
        curr = (char*)curr + payload_size + HEADER_SZ;//jump to next payload_ptr
    }
}
